/* CSS Variables */

:root {
  /* Font families */
  --ff-base: "Courier New", Courier, monospace;
  --ff-secondary: 'Permanent Marker', cursive;


  /* Font Sizes */
  --step--2: clamp(0.6944rem, 0.6577rem + 0.1836vw, 0.8rem);
  --step--1: clamp(0.8333rem, 0.7754rem + 0.2899vw, 1rem);
  --step-0: clamp(1rem, 0.913rem + 0.4348vw, 1.25rem);
  --step-1: clamp(1.2rem, 1.0739rem + 0.6304vw, 1.5625rem);
  --step-2: clamp(1.44rem, 1.2615rem + 0.8924vw, 1.9531rem);
  --step-3: clamp(1.728rem, 1.4799rem + 1.2407vw, 2.4414rem);
  --step-4: clamp(2.0736rem, 1.7334rem + 1.7011vw, 3.0518rem);
  --step-5: clamp(2.4883rem, 2.027rem + 2.3067vw, 3.8147rem);

  /* spacing */

  --space-3xs: clamp(0.25rem, 0.2283rem + 0.1087vw, 0.3125rem);
  --space-2xs: clamp(0.5rem, 0.4565rem + 0.2174vw, 0.625rem);
  --space-xs: clamp(0.75rem, 0.6848rem + 0.3261vw, 0.9375rem);
  --space-s: clamp(1rem, 0.913rem + 0.4348vw, 1.25rem);
  --space-m: clamp(1.5rem, 1.3696rem + 0.6522vw, 1.875rem);
  --space-l: clamp(2rem, 1.8261rem + 0.8696vw, 2.5rem);
  --space-xl: clamp(3rem, 2.7391rem + 1.3043vw, 3.75rem);
  --space-2xl: clamp(4rem, 3.6522rem + 1.7391vw, 5rem);
  --space-3xl: clamp(6rem, 5.4783rem + 2.6087vw, 7.5rem);

  /* One-up pairs */

  --space-3xs-2xs: clamp(0.25rem, 0.1196rem + 0.6522vw, 0.625rem);
  --space-2xs-xs: clamp(0.5rem, 0.3478rem + 0.7609vw, 0.9375rem);
  --space-xs-s: clamp(0.75rem, 0.5761rem + 0.8696vw, 1.25rem);
  --space-s-m: clamp(1rem, 0.6957rem + 1.5217vw, 1.875rem);
  --space-m-l: clamp(1.5rem, 1.1522rem + 1.7391vw, 2.5rem);
  --space-l-xl: clamp(2rem, 1.3913rem + 3.0435vw, 3.75rem);
  --space-xl-2xl: clamp(3rem, 2.3043rem + 3.4783vw, 5rem);
  --space-2xl-3xl: clamp(4rem, 2.7826rem + 6.087vw, 7.5rem);

  /* Font weights */

  --fw-500: 500;
  --fw-700: 700;
  --fw-850: 850;
  --fw-1000: 1000;

  /* Colors Primary */

  --clr-primary: #f5e7de;
  --clr-secondary: #f2bfa4;

  /* Colors neutral */

  --clr-neutral-100: #ffffff;
  --clr-neutral-200: #f2f2f2;
  --clr-neutral-300: #cccccc;
  --clr-neutral-400: #646d76;
  --clr-neutral-500: #666666;
  --clr-neutral-600: #333333;
  --clr-neutral-700: #383e4c;
  --clr-neutral-800: #262628;
  --clr-neutral-900: #000000;

  /* Colors Bootstrap */

  --clr-bs-blue: #0d6efd;
  --clr-bs-indigo: #6610f2;
  --clr-bs-purple: #6f42c1;
  --clr-bs-pink: #d63384;
  --clr-bs-red: #dc3545;
  --clr-bs-orange: #fd7e14;
  --clr-bs-yellow: #ffc107;
  --clr-bs-green: #198754;
  --clr-bs-teal: #20c997;
  --clr-bs-cyan: #0dcaf0;
  --clr-bs-white: #fff;
  --clr-bs-gray: #6c757d;
  --clr-bs-gray-dark: #343a40;
  --clr-bs-primary: #0d6efd;
  --clr-bs-secondary: #6c757d;
  --clr-bs-success: #198754;
  --clr-bs-info: #0dcaf0;
  --clr-bs-warning: #ffc107;
  --clr-bs-danger: #dc3545;
  --clr-bs-light: #f8f9fa;
  --clr-bs-dark: #212529;

  /* Border Radius */

  --border-radius-300: 0.5rem;
  --border-radius-400: 0.75rem;
  --border-radius-500: 1rem;
  --border-radius-600: 1.25rem;
  --border-radius-800: 1.5rem;
  --border-radius-900: 1.75rem;
  --border-radius-1000: 2rem;
}

/* CSS varibles */

/*
  CSS RESEST By Andy Bell
  https://piccalil.li/blog/a-more-modern-css-reset/
  CSS RESEST Start
*/

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
}

/* add inline-block */

a {
  display: inline-block;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font-family: inherit;
  font-size: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

/*
  CSS RESEST By Andy Bell
  https://piccalil.li/blog/a-more-modern-css-reset/
  CSS RESEST End
*/

/* CUBE CSS */

/* Global CSS */

html {
  font-family: var(--fs-base);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--ff-secondary);
  padding-inline: var(--space-s);
}

h1 {
  font-size: var(--step-4, 2.5rem);
}

h2 {
  font-size: var(--step-3, 2.1rem);
}

h3 {
  font-size: var(--step-2, 1.7rem);
}

p {
  padding-inline: var(--space-s);
  max-width: 75ch;
}

/*
  ---- Composition ----

  --- #What should the composition layer do?
  - Layout styles for broader sections of the page (like containers, flexbox setups,    grid systems).
  - Positioning elements (like alignment, spacing, etc.).
  - Provide high-level, flexible layouts
  - Determine how elements interact with each other
  - Create consistent flow and rhythm

  --- #What shouldn’t the composition layer do?
  - Provide visual treatment such as colour or font style
  - Provide decorative styles such as shadows and patterns
  - Force a browser to generate a pixel-perfect layout instead of a flexible, progressive layout

*/

.grid-300 {
  display: grid;
  gap: var(--space-m, 1.5rem);
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.flex-col {
  display: flex;
  flex-direction: column;
}

.flex-row {
  display: flex;
  gap: var(--space-m, 1.5rem);
}

/*
  ---- Utlities ----

  --- #What should utilities do?
  - Simple, reusable styles (like margins, padding, colors, typography).
  - Helpers for alignment, display, and visibility.
  - Apply a single CSS property, or a concise group of related properties to create   re-usable helpers
  - Extend design tokens to maintain a single source of truth
  - Abstract repeatability away from the CSS and apply it in the HTML instead

  --- #What shouldn’t utilities do?
  - Define a large group of unrelated CSS properties. For example, a utility that defined color, font-size and padding would make more sense to be a block.
  - Be used as a specificity hack. For example, setting all properties with !important - will undoubtedly cause problems in the long-run.
*/

.margin-bottom-l {
  margin-bottom: var(--space-l);
}

.stack-s > * + * {
  margin-block-start: var(--space-s, 1rem);
}

.wrapper {
  margin-inline: auto;
  padding-inline: 1rem;
  max-width: 95rem;
}

.space-between {
  justify-content: space-between;
}

.space-center {
  justify-content: center;
}

.text-center {
  text-align: center;
}

.text-clr-primary {
  color: var(--clr-primary);
}

.text-clr-secondary {
  color: var(--clr-secondary);
}

.text-clr-white {
  color: var(--clr-neutral-100);
}

.text-clr-black {
  color: var(--clr-neutral-900);
}

.bg-clr-primary {
  background-color: var(--clr-primary);
}

.bg-clr-secondary {
  background-color: var(--clr-secondary);
}

.bg-clr-white {
  background-color: var(--clr-neutral-100);
}

.bg-clr-black {
  background-color: var(--clr-neutral-900);
}

/*
  ---- Block ----

  --- #What should a block do?
  - Self-contained components (like cards, buttons, forms).
  - Styles specific to the component's base structure.
  - Extend the work already done by the global CSS, composition and utility layers
  - Apply a collection of design tokens within a concise group
  - Create a namespace or specificity boost to control a specific context

  --- #What shouldn’t a block do?
  - Grow to anything larger than a handful of CSS rules (max 80-100 lines)
  - Solve more than one contextual problem. For example: styling a card and a button in one file
*/

.card {
  width: 300px;
  border: var(--space-3xs, 0.25rem) solid var(--clr-neutral-400);
  border-radius: var(--space-s, 1rem);
  box-shadow: 0 4px 6px var(--space-3xs, 0.25rem);
}

/*
  ---- Exception ----
  --- #What should an exception do?
  - Provide a concise variation to a block
  - Use data attributes

  --- #What shouldn’t an exception do?
  - Variate a block to the point where it isn’t recognisable anymore. This is where a new block should be created
  - Use CSS classes
*/
